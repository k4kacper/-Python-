Index: -Projekt-/modele/__init__.py
===================================================================
diff --git a/-Projekt-/modele/__init__.py b/-Projekt-/modele/__init__.py
new file mode 100644
--- /dev/null	(date 1748683792689)
+++ b/-Projekt-/modele/__init__.py	(date 1748683792689)
@@ -0,0 +1,3 @@
+from .ksiazka import Ksiazka
+from .uzytkownik import Uzytkownik
+from .wypozyczenie import Wypozyczenie
\ No newline at end of file
Index: -Projekt-/baza/__init__.py
===================================================================
diff --git a/-Projekt-/baza/__init__.py b/-Projekt-/baza/__init__.py
new file mode 100644
--- /dev/null	(date 1748683872461)
+++ b/-Projekt-/baza/__init__.py	(date 1748683872461)
@@ -0,0 +1,1 @@
+from .baza_falszywych import ksiazki_db, uzytkownicy_db, wypozyczenia_db
\ No newline at end of file
Index: -Projekt-/routery/__init__.py
===================================================================
diff --git a/-Projekt-/routery/__init__.py b/-Projekt-/routery/__init__.py
new file mode 100644
--- /dev/null	(date 1748683937896)
+++ b/-Projekt-/routery/__init__.py	(date 1748683937896)
@@ -0,0 +1,3 @@
+from .ksiazki import router as ksiazki_router
+from .uzytkownicy import router as uzytkownicy_router
+from .wypozyczenia import router as wypozyczenia_router
\ No newline at end of file
Index: -Projekt-/narzedzia/pomocnicy.py
===================================================================
diff --git a/-Projekt-/narzedzia/pomocnicy.py b/-Projekt-/narzedzia/pomocnicy.py
new file mode 100644
--- /dev/null	(date 1748683962509)
+++ b/-Projekt-/narzedzia/pomocnicy.py	(date 1748683962509)
@@ -0,0 +1,2 @@
+def znajdz_element_po_id(lista, id_elementu):
+    return next((element for element in lista if element.id == id_elementu), None)
\ No newline at end of file
Index: -Projekt-/narzedzia/__init__.py
===================================================================
diff --git a/-Projekt-/narzedzia/__init__.py b/-Projekt-/narzedzia/__init__.py
new file mode 100644
--- /dev/null	(date 1748683977086)
+++ b/-Projekt-/narzedzia/__init__.py	(date 1748683977086)
@@ -0,0 +1,1 @@
+from .pomocnicy import znajdz_element_po_id
\ No newline at end of file
Index: -Projekt-/modele/uzytkownik.py
===================================================================
diff --git a/-Projekt-/modele/uzytkownik.py b/-Projekt-/modele/uzytkownik.py
new file mode 100644
--- /dev/null	(date 1748765682450)
+++ b/-Projekt-/modele/uzytkownik.py	(date 1748765682450)
@@ -0,0 +1,6 @@
+from pydantic import BaseModel, EmailStr
+
+class Uzytkownik(BaseModel):
+    id: int
+    imie: str
+    email: EmailStr
\ No newline at end of file
Index: -Projekt-/modele/wypozyczenie.py
===================================================================
diff --git a/-Projekt-/modele/wypozyczenie.py b/-Projekt-/modele/wypozyczenie.py
new file mode 100644
--- /dev/null	(date 1748770599386)
+++ b/-Projekt-/modele/wypozyczenie.py	(date 1748770599386)
@@ -0,0 +1,9 @@
+from datetime import datetime
+from pydantic import BaseModel, EmailStr
+
+class Wypozyczenie(BaseModel):
+    id: int
+    nazwaKsiazki: str
+    emailUzytkownika: EmailStr
+    wypozyczono_date: datetime
+    return_date: datetime | None
\ No newline at end of file
Index: -Projekt-/baza/baza_falszywych.py
===================================================================
diff --git a/-Projekt-/baza/baza_falszywych.py b/-Projekt-/baza/baza_falszywych.py
new file mode 100644
--- /dev/null	(date 1748683883868)
+++ b/-Projekt-/baza/baza_falszywych.py	(date 1748683883868)
@@ -0,0 +1,3 @@
+ksiazki_db = []
+uzytkownicy_db = []
+wypozyczenia_db = []
\ No newline at end of file
Index: -Projekt-/frontend/index.html
===================================================================
diff --git a/-Projekt-/frontend/index.html b/-Projekt-/frontend/index.html
new file mode 100644
--- /dev/null	(date 1748777197240)
+++ b/-Projekt-/frontend/index.html	(date 1748777197240)
@@ -0,0 +1,64 @@
+<!DOCTYPE html>
+<html lang="pl">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Biblioteka Online</title>
+    <link rel="stylesheet" href="style.css">
+</head>
+<body>
+    <h1>Biblioteka Online</h1>
+
+    <section id="dodaj-ksiazke">
+        <h2>Dodaj Książkę</h2>
+        <input type="text" id="tytul" placeholder="Tytuł książki">
+        <input type="text" id="autor" placeholder="Autor">
+        <input type="number" id="rok" placeholder="Rok wydania">
+        <button onclick="dodajKsiazke()">Dodaj</button>
+    </section>
+
+<section id="listaKsiazek">
+    <h2>Lista Książek</h2>
+    <ul id="ksiazki"></ul>
+</section>
+
+<section id="wyszukaj-ksiazke">
+    <h2>Wyszukaj Książkę</h2>
+    <input type="text" id="szukajTytul" placeholder="Tytuł książki">
+    <input type="text" id="szukajAutor" placeholder="Autor książki">
+</section>
+
+<section id="wyniki-wyszukiwania">
+    <h2>Wyniki wyszukiwania</h2>
+    <ul id="wyniki"></ul>
+</section>
+
+<section id="dodaj-uzytkownika">
+    <h2>Dodaj Użytkownika</h2>
+    <input type="text" id="imie" placeholder="Imię">
+    <input type="email" id="email" placeholder="E-mail">
+    <button id="dodajUzytkownika">Dodaj</button>
+</section>
+
+<section id="lista-uzytkownikow">
+    <h2>Lista Użytkowników</h2>
+    <ul id="uzytkownicy"></ul>
+</section>
+<section id="wypozyczenia">
+    <h2>Wypożycz książkę</h2>
+    <input type="text" id="nazwaKsiazki" placeholder="Nazwa książki">
+    <input type="email" id="emailUzytkownika" placeholder="E-mail użytkownika">
+    <button onclick="wypozyczKsiazke()">📖 Wypożycz</button>
+</section>
+
+<section id="historia">
+    <h2>Historia wypożyczeń</h2>
+    <input type="email" id="emailUzytkownikaHistoria" placeholder="E-mail użytkownika">
+    <button onclick="pobierzHistorie()">📜 Zobacz historię</button>
+    <ul id="listaHistoria"></ul>
+</section>
+
+<script src="app.js"></script>
+
+</body>
+</html>
\ No newline at end of file
Index: -Projekt-/frontend/style.css
===================================================================
diff --git a/-Projekt-/frontend/style.css b/-Projekt-/frontend/style.css
new file mode 100644
--- /dev/null	(date 1748767706672)
+++ b/-Projekt-/frontend/style.css	(date 1748767706672)
@@ -0,0 +1,91 @@
+html, body {
+    scroll-behavior: smooth;
+}
+
+body {
+    font-family: "Orbitron", sans-serif;
+    background: linear-gradient(to bottom, #020024, #090979, #00d4ff);
+    color: white;
+    text-align: center;
+    margin: 0;
+    padding: 20px;
+    height: 100vh; /* Pełna wysokość ekranu */
+    display: flex;
+    flex-direction: column;
+    justify-content: center;
+    align-items: center;
+    overflow: hidden;
+}
+
+
+h1 {
+    font-size: 2.5em;
+    text-transform: uppercase;
+    color: #00d4ff;
+    text-shadow: 0px 0px 15px #00d4ff;
+    letter-spacing: 3px;
+}
+
+
+input {
+    background: rgba(255, 255, 255, 0.2);
+    border: 2px solid #00d4ff;
+    color: white;
+    padding: 10px;
+    font-size: 1.1em;
+    border-radius: 10px;
+    outline: none;
+}
+
+input::placeholder {
+    color: rgba(255, 255, 255, 0.5);
+}
+
+input:focus {
+    border-color: #ff00ff;
+    box-shadow: 0px 0px 10px #ff00ff;
+}
+
+button {
+    background: linear-gradient(45deg, #ff00ff, #00d4ff);
+    border: none;
+    color: white;
+    padding: 12px 25px;
+    font-size: 1.2em;
+    border-radius: 8px;
+    cursor: pointer;
+    transition: 0.3s;
+    text-transform: uppercase;
+    margin-left: 20px;
+}
+
+button:hover {
+    box-shadow: 0px 0px 15px #00d4ff;
+    transform: scale(1.05);
+}
+
+ul {
+    list-style-type: none;
+    padding: 0;
+}
+
+li {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    background: rgba(255, 255, 255, 0.1);
+    border: 2px solid #00d4ff;
+    padding: 12px;
+    margin: 10px 0;
+    border-radius: 10px;
+    transition: 0.3s;
+}
+
+li:hover {
+    box-shadow: 0px 0px 10px #00d4ff;
+}
+
+.kontener-przyciskow {
+    display: flex;
+    gap: 10px;
+}
\ No newline at end of file
Index: -Projekt-/modele/ksiazka.py
===================================================================
diff --git a/-Projekt-/modele/ksiazka.py b/-Projekt-/modele/ksiazka.py
new file mode 100644
--- /dev/null	(date 1748683754416)
+++ b/-Projekt-/modele/ksiazka.py	(date 1748683754416)
@@ -0,0 +1,8 @@
+from pydantic import BaseModel
+
+class Ksiazka(BaseModel):
+    id: int
+    tytul: str
+    autor: str
+    rok: int
+    dostepna: bool = True
\ No newline at end of file
Index: -Projekt-/frontend/app.js
===================================================================
diff --git a/-Projekt-/frontend/app.js b/-Projekt-/frontend/app.js
new file mode 100644
--- /dev/null	(date 1748776971172)
+++ b/-Projekt-/frontend/app.js	(date 1748776971172)
@@ -0,0 +1,239 @@
+const apiUrl = window.location.origin.includes("localhost")
+    ? "http://127.0.0.1:8080"
+    : "https://ksiazki-api.herokuapp.com";
+
+// Funkcje pomocnicze
+async function apiCall(url, options = {}) {
+    try {
+        const response = await fetch(url, options);
+        if (response.ok) {
+            return response;
+        } else {
+            const error = await response.json();
+            new Error(error.detail || 'Błąd API');
+        }
+    } catch (error) {
+        alert(`Błąd: ${error.message}`);
+        throw error;
+    }
+}
+
+function showMessage(msg) {
+    alert(msg);
+}
+
+function clearInputs(...ids) {
+    ids.forEach(id => document.getElementById(id).value = '');
+}
+
+// KSIĄŻKI
+async function dodajKsiazke() {
+    const tytul = document.getElementById("tytul").value.trim();
+    const autor = document.getElementById("autor").value.trim();
+    const rok = document.getElementById("rok").value.trim();
+
+    if (!tytul || !autor || !rok) {
+        return showMessage("Proszę uzupełnić wszystkie pola!");
+    }
+
+    try {
+        await apiCall(`${apiUrl}/ksiazki/`, {
+            method: "POST",
+            headers: { "Content-Type": "application/json" },
+            body: JSON.stringify({ id: Date.now(), tytul, autor, rok, dostepna: true })
+        });
+
+        showMessage("Książka dodana!");
+        clearInputs("tytul", "autor", "rok");
+        await pobierzKsiazki();
+    } catch (error) {
+        // Błąd już obsłużony w apiCall
+    }
+}
+
+async function pobierzKsiazki() {
+    const response = await fetch(`${apiUrl}/ksiazki/`);
+    const ksiazki = await response.json();
+
+    const listaKsiazek = document.getElementById("ksiazki");
+    listaKsiazek.innerHTML = "";
+
+    ksiazki.forEach(ksiazka => {
+        const element = document.createElement("li");
+
+        const tekstKsiazki = document.createElement("span");
+        tekstKsiazki.textContent = `${ksiazka.tytul} - ${ksiazka.autor} (${ksiazka.rok}) - ${ksiazka.dostepna ? "✅ Dostępna" : "❌ Wypożyczona"}`;
+
+        element.appendChild(tekstKsiazki);
+        listaKsiazek.appendChild(element);
+    });
+}
+
+// WYSZUKIWANIE
+async function wyszukajKsiazke() {
+    const tytul = document.getElementById("szukajTytul").value.trim();
+    const autor = document.getElementById("szukajAutor").value.trim();
+
+    if (!tytul && !autor) {
+        document.getElementById("wyniki").innerHTML = "";
+        return;
+    }
+
+    try {
+        let url = `${apiUrl}/ksiazki/szukaj/?`;
+        if (tytul) url += `tytul=${encodeURIComponent(tytul)}&`;
+        if (autor) url += `autor=${encodeURIComponent(autor)}`;
+
+        const response = await fetch(url);
+        const wyniki = await response.json();
+
+        const lista = document.getElementById("wyniki");
+        lista.innerHTML = wyniki.length === 0
+            ? "<li>Brak wyników.</li>"
+            : wyniki.map(k => `<li>${k.tytul} - ${k.autor} (${k.rok})</li>`).join("");
+
+    } catch (error) {
+        showMessage("Błąd wyszukiwania!");
+    }
+}
+
+// UŻYTKOWNICY
+async function dodajUzytkownika() {
+    const imie = document.getElementById("imie").value.trim();
+    const email = document.getElementById("email").value.trim();
+
+    if (!imie || !email) {
+        alert("Podaj imię i e-mail!");
+        return;
+    }
+
+    try {
+        const response = await fetch(`${apiUrl}/uzytkownicy/`, {
+            method: "POST",
+            headers: { "Content-Type": "application/json" },
+            body: JSON.stringify({
+                id: Date.now(), // Dodanie id użytkownika
+                imie,
+                email
+            })
+        });
+
+        if (!response.ok) {
+            let errorData;
+            try {
+                errorData = await response.json();
+            } catch (err) {
+                errorData = { detail: "Nieznany błąd serwera" };
+            }
+            console.error("Błąd serwera:", errorData);
+            alert(`Błąd: ${JSON.stringify(errorData)}`);
+            return;
+        }
+
+        alert("Użytkownik dodany!");
+        await pobierzUzytkownikow();
+    } catch (error) {
+        console.error("Błąd połączenia:", error);
+        alert("Nie udało się połączyć z serwerem.");
+    }
+}
+
+async function usunUzytkownika(id) {
+    try {
+        await apiCall(`${apiUrl}/uzytkownicy/${id}`, { method: "DELETE" });
+        showMessage("Użytkownik usunięty!");
+        await pobierzUzytkownikow();
+    } catch (error) {
+        // Błąd już obsłużony w apiCall
+    }
+}
+
+async function pobierzUzytkownikow() {
+    try {
+        const response = await fetch(`${apiUrl}/uzytkownicy/`);
+        const uzytkownicy = await response.json();
+
+        const lista = document.getElementById("uzytkownicy");
+        lista.innerHTML = "";
+
+        uzytkownicy.forEach(u => {
+            const li = document.createElement("li");
+            li.textContent = `${u.imie} - ${u.email}`;
+
+            const btnUsun = document.createElement("button");
+            btnUsun.textContent = "❌ Usuń";
+            btnUsun.onclick = () => usunUzytkownika(u.id);
+
+            li.appendChild(btnUsun);
+            lista.appendChild(li);
+        });
+    } catch (error) {
+        showMessage("Błąd pobierania użytkowników!");
+    }
+}
+
+async function wypozyczKsiazke() {
+    const nazwaKsiazki = document.getElementById("nazwaKsiazki").value.trim();
+    const emailUzytkownika = document.getElementById("emailUzytkownika").value.trim();
+
+    if (!nazwaKsiazki || !emailUzytkownika) {
+        alert("Podaj nazwę książki i e-mail!");
+        return;
+    }
+
+    try {
+        const response = await fetch(`${apiUrl}/wypozyczenia/wypozycz/`, {
+            method: "POST",
+            headers: { "Content-Type": "application/json" },
+            body: JSON.stringify({ nazwaKsiazki: nazwaKsiazki, emailUzytkownika: emailUzytkownika })
+        });
+
+        if (response.ok) {
+            alert("Książka wypożyczona!");
+            await pobierzKsiazki();  // 💡 Automatyczne odświeżenie listy książek
+        } else {
+            const errorData = await response.json();
+            alert(`Błąd: ${errorData.detail}`);
+        }
+    } catch (error) {
+        alert("Błąd połączenia z serwerem!");
+    }
+}
+
+function formatDate(dateString) {
+    if (!dateString) return "Nie zwrócono";  // Obsługa pustych wartości
+    const date = new Date(dateString);
+    return date.toLocaleString("pl-PL");
+}
+
+async function pobierzHistorie() {
+    const emailUzytkownika = document.getElementById("emailUzytkownikaHistoria").value.trim();
+    if (!emailUzytkownika) {
+        alert("Podaj e-mail użytkownika!");
+        return;
+    }
+
+    const response = await fetch(`${apiUrl}/wypozyczenia/historia/${encodeURIComponent(emailUzytkownika)}`);
+    const historia = await response.json();
+
+    const listaHistoria = document.getElementById("listaHistoria");
+    listaHistoria.innerHTML = "";
+
+    historia.historia.forEach(w => {
+        const element = document.createElement("li");
+        element.textContent = `📖 ${w.nazwaKsiazki} | Wypożyczono: ${formatDate(w.wypozyczono_date)} | Zwrot: ${w.return_date ? formatDate(w.return_date) : "Nie zwrócono"}`;
+        listaHistoria.appendChild(element);
+    });
+}
+
+
+// INICJALIZACJA
+window.onload = () => {
+    pobierzKsiazki().then();
+    pobierzUzytkownikow().then();
+
+    // Event listenery dla wyszukiwania
+    document.getElementById("szukajTytul").addEventListener("input", wyszukajKsiazke);
+    document.getElementById("szukajAutor").addEventListener("input", wyszukajKsiazke);
+    document.getElementById("dodajUzytkownika").onclick = dodajUzytkownika;
+};
\ No newline at end of file
Index: -Projekt-/routery/ksiazki.py
===================================================================
diff --git a/-Projekt-/routery/ksiazki.py b/-Projekt-/routery/ksiazki.py
new file mode 100644
--- /dev/null	(date 1748776971157)
+++ b/-Projekt-/routery/ksiazki.py	(date 1748776971157)
@@ -0,0 +1,26 @@
+from fastapi import APIRouter, HTTPException, Query
+from modele.ksiazka import Ksiazka
+from baza.baza_falszywych import ksiazki_db
+
+router = APIRouter()
+
+@router.post("/")
+def dodaj_ksiazke(ksiazka: Ksiazka):
+    ksiazki_db.append(ksiazka)
+    return {"wiadomosc": "Książka dodana", "ksiazka": ksiazka}
+
+@router.get("/")
+def pobierz_ksiazki():
+    return ksiazki_db
+
+@router.get("/szukaj/")
+def szukaj_ksiazki(tytul: str = Query(None), autor: str = Query(None)):
+    wyniki = ksiazki_db
+
+    if tytul:
+        wyniki = [ksiazka for ksiazka in wyniki if tytul.lower() in ksiazka.tytul.lower()]
+    if autor:
+        wyniki = [ksiazka for ksiazka in wyniki if autor.lower() in ksiazka.autor.lower()]
+
+    return wyniki
+
Index: -Projekt-/routery/uzytkownicy.py
===================================================================
diff --git a/-Projekt-/routery/uzytkownicy.py b/-Projekt-/routery/uzytkownicy.py
new file mode 100644
--- /dev/null	(date 1748693869405)
+++ b/-Projekt-/routery/uzytkownicy.py	(date 1748693869405)
@@ -0,0 +1,38 @@
+from fastapi import APIRouter, HTTPException
+from modele.uzytkownik import Uzytkownik
+from baza.baza_falszywych import uzytkownicy_db
+
+router = APIRouter()
+
+@router.post("/")
+def dodaj_uzytkownika(uzytkownik: Uzytkownik):
+    if any(u.email == uzytkownik.email for u in uzytkownicy_db):
+        raise HTTPException(status_code=400, detail="E-mail już istnieje!")
+
+    uzytkownicy_db.append(uzytkownik)
+    return {"wiadomosc": "Użytkownik dodany!", "uzytkownik": uzytkownik}
+
+@router.get("/")
+def pobierz_uzytkownikow():
+    return uzytkownicy_db
+
+@router.delete("/{id}")
+def usun_uzytkownika(id: int):
+    global uzytkownicy_db
+    uzytkownik_do_usuniecia = next((u for u in uzytkownicy_db if u.id == id), None)
+
+    if not uzytkownik_do_usuniecia:
+        raise HTTPException(status_code=404, detail="Użytkownik nie istnieje")
+
+    uzytkownicy_db = [u for u in uzytkownicy_db if u.id != id]
+    return {"wiadomosc": "Użytkownik usunięty!", "id": id}
+
+@router.put("/{id}")
+def edytuj_uzytkownika(id: int, nowy_uzytkownik: Uzytkownik):
+    global uzytkownicy_db
+    for i, u in enumerate(uzytkownicy_db):
+        if u.id == id:
+            uzytkownicy_db[i] = nowy_uzytkownik
+            return {"wiadomosc": "Użytkownik zaktualizowany!", "uzytkownik": nowy_uzytkownik}
+
+    raise HTTPException(status_code=404, detail="Użytkownik nie istnieje")
\ No newline at end of file
Index: -Projekt-/routery/wypozyczenia.py
===================================================================
diff --git a/-Projekt-/routery/wypozyczenia.py b/-Projekt-/routery/wypozyczenia.py
new file mode 100644
--- /dev/null	(date 1748776971180)
+++ b/-Projekt-/routery/wypozyczenia.py	(date 1748776971180)
@@ -0,0 +1,53 @@
+from fastapi import APIRouter, HTTPException
+from modele.wypozyczenie import Wypozyczenie
+from baza.baza_falszywych import wypozyczenia_db, ksiazki_db
+from pydantic import BaseModel, EmailStr
+from datetime import datetime
+
+router = APIRouter()
+id_counter = 1
+
+# Model dla żądania wypożyczenia
+class WypozyczRequest(BaseModel):
+    nazwaKsiazki: str
+    emailUzytkownika: EmailStr
+
+# Funkcja pomocnicza do znajdowania książki
+def znajdz_ksiazke(nazwaKsiazki: str):
+    return next((ksiazka for ksiazka in ksiazki_db if ksiazka.tytul.lower() == nazwaKsiazki.lower()), None)
+
+# Funkcja pomocnicza do znajdowania wypożyczenia
+def znajdz_wypozyczenie(wypozyczenie_id: int):
+    return next((wypozyczenie for wypozyczenie in wypozyczenia_db if wypozyczenie.id == wypozyczenie_id), None)
+
+@router.post("/wypozycz/")
+def wypozycz_ksiazke(request: WypozyczRequest):
+    global id_counter
+
+    ksiazka = znajdz_ksiazke(request.nazwaKsiazki)
+
+    if not ksiazka:
+        raise HTTPException(404, "Książka nie istnieje")
+
+    if not ksiazka.dostepna:
+        raise HTTPException(400, "Książka już wypożyczona")
+
+    wypozyczenie = Wypozyczenie(
+        id=id_counter,
+        nazwaKsiazki=request.nazwaKsiazki,
+        emailUzytkownika=request.emailUzytkownika,
+        wypozyczono_date=datetime.now(),
+        return_date=None
+    )
+
+    ksiazka.dostepna = False
+    wypozyczenia_db.append(wypozyczenie)
+    id_counter += 1
+
+    return {"wiadomosc": "Książka wypożyczona!", "wypozyczenie": wypozyczenie}
+
+
+@router.get("/historia/{emailUzytkownika}")
+def historia_wypozyczen(emailUzytkownika: EmailStr):
+    historia = [wyp for wyp in wypozyczenia_db if wyp.emailUzytkownika.lower() == emailUzytkownika.lower()]
+    return {"wiadomosc": "Historia wypożyczeń", "historia": historia}
\ No newline at end of file
Index: -Projekt-/main.py
===================================================================
diff --git a/-Projekt-/main.py b/-Projekt-/main.py
new file mode 100644
--- /dev/null	(date 1748767808231)
+++ b/-Projekt-/main.py	(date 1748767808231)
@@ -0,0 +1,26 @@
+import uvicorn
+from fastapi import FastAPI
+from routery import ksiazki, uzytkownicy, wypozyczenia
+
+app = FastAPI()
+
+app.include_router(ksiazki.router, prefix="/ksiazki", tags=["ksiazki"])
+app.include_router(uzytkownicy.router, prefix="/uzytkownicy", tags=["uzytkownicy"])
+app.include_router(wypozyczenia.router, prefix="/wypozyczenia", tags=["wypozyczenia"])
+
+@app.get("/")
+def home():
+    return {"wiadomosc": "Witaj w systemie zarządzania biblioteką!"}
+
+if __name__ == "__main__":
+    uvicorn.run("__main__:app", host="127.0.0.1", port=8080, reload=True)
+
+from fastapi.middleware.cors import CORSMiddleware
+
+app.add_middleware(
+    CORSMiddleware,
+    allow_origins=["http://localhost:63342", "http://127.0.0.1:8080"],
+    allow_credentials=True,
+    allow_methods=["GET", "POST", "PUT", "DELETE"],
+    allow_headers=["Content-Type", "Authorization"],
+)
\ No newline at end of file
Index: main.py
===================================================================
diff --git a/main.py b/main.py
new file mode 100644
--- /dev/null	(date 1748683029837)
+++ b/main.py	(date 1748683029837)
@@ -0,0 +1,9 @@
+import uvicorn
+from fastapi import FastAPI
+app = FastAPI()
+@app.get("/")
+async def read_root():
+    return {"Hello": "World"}
+
+if __name__ == "__main__":
+    uvicorn.run(app, host="127.0.0.1", port=8000)
\ No newline at end of file
